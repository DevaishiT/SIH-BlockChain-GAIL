# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

version: '2'

volumes:
    orderer.example.com:
    peer0.gail.example.com:
    peer0.contractors.example.com:
    peer1.gail.example.com:
    peer1.contractors.example.com:
    peer2.contractors.example.com:
    peer3.contractors.example.com:
    peer4.contractors.example.com:
    peer5.contractors.example.com:
    peer6.contractors.example.com:
    peer7.contractors.example.com:
    peer8.contractors.example.com:
    peer9.contractors.example.com:

networks:
    test:

services:

    orderer.example.com:
        container_name: orderer.example.com
        image: hyperledger/fabric-orderer:$IMAGE_TAG
        environment:
            - FABRIC_LOGGING_SPEC=INFO
            - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
            - ORDERER_GENERAL_LISTENPORT=7050
            - ORDERER_GENERAL_GENESISMETHOD=file
            - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block
            - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
            - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
            # enabled TLS
            - ORDERER_GENERAL_TLS_ENABLED=true
            - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
            - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
            - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
            - ORDERER_KAFKA_TOPIC_REPLICATIONFACTOR=1
            - ORDERER_KAFKA_VERBOSE=true
            - ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=/var/hyperledger/orderer/tls/server.crt
            - ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=/var/hyperledger/orderer/tls/server.key
            - ORDERER_GENERAL_CLUSTER_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
        working_dir: /opt/gopath/src/github.com/hyperledger/fabric
        command: orderer
        volumes:
            - ../system-genesis-block/genesis.block:/var/hyperledger/orderer/orderer.genesis.block
            - ../organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp:/var/hyperledger/orderer/msp
            - ../organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/:/var/hyperledger/orderer/tls
            - orderer.example.com:/var/hyperledger/production/orderer
        ports:
            - 7050:7050
        networks:
            - test

    peer0.gail.example.com:
        container_name: peer0.gail.example.com
        image: hyperledger/fabric-peer:$IMAGE_TAG
        environment:
            #Generic peer variables
            - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
            # the following setting starts chaincode containers on the same
            # bridge network as the peers
            # https://docs.docker.com/compose/networking/
            - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
            - FABRIC_LOGGING_SPEC=INFO
            #- FABRIC_LOGGING_SPEC=DEBUG
            - CORE_PEER_TLS_ENABLED=true
            - CORE_PEER_GOSSIP_USELEADERELECTION=true
            - CORE_PEER_GOSSIP_ORGLEADER=false
            - CORE_PEER_PROFILE_ENABLED=true
            - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
            - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
            - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
            # Peer specific variabes
            - CORE_PEER_ID=peer0.gail.example.com
            - CORE_PEER_ADDRESS=peer0.gail.example.com:7051
            - CORE_PEER_LISTENADDRESS=0.0.0.0:7051
            - CORE_PEER_CHAINCODEADDRESS=peer0.gail.example.com:7052
            - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052
            - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.gail.example.com:7051
            - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.gail.example.com:7051
            - CORE_PEER_LOCALMSPID=GailMSP
        volumes:
            - /var/run/:/host/var/run/
            - ../organizations/peerOrganizations/gail.example.com/peers/peer0.gail.example.com/msp:/etc/hyperledger/fabric/msp
            - ../organizations/peerOrganizations/gail.example.com/peers/peer0.gail.example.com/tls:/etc/hyperledger/fabric/tls
            - peer0.gail.example.com:/var/hyperledger/production
        working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
        command: peer node start
        ports:
            - 7051:7051
        networks:
            - test

    peer1.gail.example.com:
        container_name: peer1.gail.example.com
        image: hyperledger/fabric-peer:$IMAGE_TAG
        environment:
            #Generic peer variables
            - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
            # the following setting starts chaincode containers on the same
            # bridge network as the peers
            # https://docs.docker.com/compose/networking/
            - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
            - FABRIC_LOGGING_SPEC=INFO
            #- FABRIC_LOGGING_SPEC=DEBUG
            - CORE_PEER_TLS_ENABLED=true
            - CORE_PEER_GOSSIP_USELEADERELECTION=true
            - CORE_PEER_GOSSIP_ORGLEADER=false
            - CORE_PEER_PROFILE_ENABLED=true
            - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
            - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
            - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
            # Peer specific variabes
            - CORE_PEER_ID=peer1.gail.example.com
            - CORE_PEER_ADDRESS=peer1.gail.example.com:7055
            - CORE_PEER_LISTENADDRESS=0.0.0.0:7055
            - CORE_PEER_CHAINCODEADDRESS=peer1.gail.example.com:7056
            - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7056
            - CORE_PEER_GOSSIP_BOOTSTRAP=peer1.gail.example.com:7055
            - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.gail.example.com:7055
            - CORE_PEER_LOCALMSPID=GailMSP
        volumes:
            - /var/run/:/host/var/run/
            - ../organizations/peerOrganizations/gail.example.com/peers/peer1.gail.example.com/msp:/etc/hyperledger/fabric/msp
            - ../organizations/peerOrganizations/gail.example.com/peers/peer1.gail.example.com/tls:/etc/hyperledger/fabric/tls
            - peer1.gail.example.com:/var/hyperledger/production
        working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
        command: peer node start
        ports:
            - 7055:7055
        networks:
        - test

    peer0.contractors.example.com:
        container_name: peer0.contractors.example.com
        image: hyperledger/fabric-peer:$IMAGE_TAG
        environment:
            #Generic peer variables
            - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
            # the following setting starts chaincode containers on the same
            # bridge network as the peers
            # https://docs.docker.com/compose/networking/
            - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
            - FABRIC_LOGGING_SPEC=INFO
            #- FABRIC_LOGGING_SPEC=DEBUG
            - CORE_PEER_TLS_ENABLED=true
            - CORE_PEER_GOSSIP_USELEADERELECTION=true
            - CORE_PEER_GOSSIP_ORGLEADER=false
            - CORE_PEER_PROFILE_ENABLED=true
            - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
            - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
            - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
            # Peer specific variabes
            - CORE_PEER_ID=peer0.contractors.example.com
            - CORE_PEER_ADDRESS=peer0.contractors.example.com:9051
            - CORE_PEER_LISTENADDRESS=0.0.0.0:9051
            - CORE_PEER_CHAINCODEADDRESS=peer0.contractors.example.com:9052
            - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:9052
            - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.contractors.example.com:9051
            - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.contractors.example.com:9051
            - CORE_PEER_LOCALMSPID=ContractorsMSP
        volumes:
            - /var/run/:/host/var/run/
            - ../organizations/peerOrganizations/contractors.example.com/peers/peer0.contractors.example.com/msp:/etc/hyperledger/fabric/msp
            - ../organizations/peerOrganizations/contractors.example.com/peers/peer0.contractors.example.com/tls:/etc/hyperledger/fabric/tls
            - peer0.contractors.example.com:/var/hyperledger/production
        working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
        command: peer node start
        ports:
            - 9051:9051
        networks:
            - test

    peer1.contractors.example.com:
        container_name: peer1.contractors.example.com
        image: hyperledger/fabric-peer:$IMAGE_TAG
        environment:
            #Generic peer variables
            - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
            # the following setting starts chaincode containers on the same
            # bridge network as the peers
            # https://docs.docker.com/compose/networking/
            - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
            - FABRIC_LOGGING_SPEC=INFO
            #- FABRIC_LOGGING_SPEC=DEBUG
            - CORE_PEER_TLS_ENABLED=true
            - CORE_PEER_GOSSIP_USELEADERELECTION=true
            - CORE_PEER_GOSSIP_ORGLEADER=false
            - CORE_PEER_PROFILE_ENABLED=true
            - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
            - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
            - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
            # Peer specific variabes
            - CORE_PEER_ID=peer1.contractors.example.com
            - CORE_PEER_ADDRESS=peer1.contractors.example.com:9055
            - CORE_PEER_LISTENADDRESS=0.0.0.0:9055
            - CORE_PEER_CHAINCODEADDRESS=peer1.contractors.example.com:9056
            - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:9056
            - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.contractors.example.com:9055
            - CORE_PEER_GOSSIP_BOOTSTRAP=peer1.contractors.example.com:9055
            - CORE_PEER_LOCALMSPID=ContractorsMSP
        volumes:
            - /var/run/:/host/var/run/
            - ../organizations/peerOrganizations/contractors.example.com/peers/peer1.contractors.example.com/msp:/etc/hyperledger/fabric/msp
            - ../organizations/peerOrganizations/contractors.example.com/peers/peer1.contractors.example.com/tls:/etc/hyperledger/fabric/tls
            - peer1.contractors.example.com:/var/hyperledger/production
        working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
        command: peer node start
        ports:
            - 9055:9055
        networks:
            - test

    peer2.contractors.example.com:
        container_name: peer2.contractors.example.com
        image: hyperledger/fabric-peer:$IMAGE_TAG
        environment:
            #Generic peer variables
            - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
            # the following setting starts chaincode containers on the same
            # bridge network as the peers
            # https://docs.docker.com/compose/networking/
            - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
            - FABRIC_LOGGING_SPEC=INFO
            #- FABRIC_LOGGING_SPEC=DEBUG
            - CORE_PEER_TLS_ENABLED=true
            - CORE_PEER_GOSSIP_USELEADERELECTION=true
            - CORE_PEER_GOSSIP_ORGLEADER=false
            - CORE_PEER_PROFILE_ENABLED=true
            - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
            - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
            - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
            # Peer specific variabes
            - CORE_PEER_ID=peer2.contractors.example.com
            - CORE_PEER_ADDRESS=peer2.contractors.example.com:9057
            - CORE_PEER_LISTENADDRESS=0.0.0.0:9057
            - CORE_PEER_CHAINCODEADDRESS=peer2.contractors.example.com:9058
            - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:9058
            - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer2.contractors.example.com:9057
            - CORE_PEER_GOSSIP_BOOTSTRAP=peer2.contractors.example.com:9057
            - CORE_PEER_LOCALMSPID=ContractorsMSP
        volumes:
            - /var/run/:/host/var/run/
            - ../organizations/peerOrganizations/contractors.example.com/peers/peer2.contractors.example.com/msp:/etc/hyperledger/fabric/msp
            - ../organizations/peerOrganizations/contractors.example.com/peers/peer2.contractors.example.com/tls:/etc/hyperledger/fabric/tls
            - peer2.contractors.example.com:/var/hyperledger/production
        working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
        command: peer node start
        ports:
            - 9057:9057
        networks:
            - test

    peer3.contractors.example.com:
        container_name: peer3.contractors.example.com
        image: hyperledger/fabric-peer:$IMAGE_TAG
        environment:
            #Generic peer variables
            - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
            # the following setting starts chaincode containers on the same
            # bridge network as the peers
            # https://docs.docker.com/compose/networking/
            - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
            - FABRIC_LOGGING_SPEC=INFO
            #- FABRIC_LOGGING_SPEC=DEBUG
            - CORE_PEER_TLS_ENABLED=true
            - CORE_PEER_GOSSIP_USELEADERELECTION=true
            - CORE_PEER_GOSSIP_ORGLEADER=false
            - CORE_PEER_PROFILE_ENABLED=true
            - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
            - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
            - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
            # Peer specific variabes
            - CORE_PEER_ID=peer3.contractors.example.com
            - CORE_PEER_ADDRESS=peer3.contractors.example.com:9059
            - CORE_PEER_LISTENADDRESS=0.0.0.0:9059
            - CORE_PEER_CHAINCODEADDRESS=peer3.contractors.example.com:9060
            - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:9060
            - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer3.contractors.example.com:9059
            - CORE_PEER_GOSSIP_BOOTSTRAP=peer3.contractors.example.com:9059
            - CORE_PEER_LOCALMSPID=ContractorsMSP
        volumes:
            - /var/run/:/host/var/run/
            - ../organizations/peerOrganizations/contractors.example.com/peers/peer3.contractors.example.com/msp:/etc/hyperledger/fabric/msp
            - ../organizations/peerOrganizations/contractors.example.com/peers/peer3.contractors.example.com/tls:/etc/hyperledger/fabric/tls
            - peer3.contractors.example.com:/var/hyperledger/production
        working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
        command: peer node start
        ports:
            - 9059:9059
        networks:
            - test

    peer4.contractors.example.com:
        container_name: peer4.contractors.example.com
        image: hyperledger/fabric-peer:$IMAGE_TAG
        environment:
            #Generic peer variables
            - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
            # the following setting starts chaincode containers on the same
            # bridge network as the peers
            # https://docs.docker.com/compose/networking/
            - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
            - FABRIC_LOGGING_SPEC=INFO
            #- FABRIC_LOGGING_SPEC=DEBUG
            - CORE_PEER_TLS_ENABLED=true
            - CORE_PEER_GOSSIP_USELEADERELECTION=true
            - CORE_PEER_GOSSIP_ORGLEADER=false
            - CORE_PEER_PROFILE_ENABLED=true
            - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
            - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
            - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
            # Peer specific variabes
            - CORE_PEER_ID=peer4.contractors.example.com
            - CORE_PEER_ADDRESS=peer4.contractors.example.com:9061
            - CORE_PEER_LISTENADDRESS=0.0.0.0:9061
            - CORE_PEER_CHAINCODEADDRESS=peer4.contractors.example.com:9062
            - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:9062
            - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer4.contractors.example.com:9061
            - CORE_PEER_GOSSIP_BOOTSTRAP=peer4.contractors.example.com:9061
            - CORE_PEER_LOCALMSPID=ContractorsMSP
        volumes:
            - /var/run/:/host/var/run/
            - ../organizations/peerOrganizations/contractors.example.com/peers/peer4.contractors.example.com/msp:/etc/hyperledger/fabric/msp
            - ../organizations/peerOrganizations/contractors.example.com/peers/peer4.contractors.example.com/tls:/etc/hyperledger/fabric/tls
            - peer4.contractors.example.com:/var/hyperledger/production
        working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
        command: peer node start
        ports:
            - 9061:9061
        networks:
            - test

    peer5.contractors.example.com:
        container_name: peer5.contractors.example.com
        image: hyperledger/fabric-peer:$IMAGE_TAG
        environment:
            #Generic peer variables
            - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
            # the following setting starts chaincode containers on the same
            # bridge network as the peers
            # https://docs.docker.com/compose/networking/
            - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
            - FABRIC_LOGGING_SPEC=INFO
            #- FABRIC_LOGGING_SPEC=DEBUG
            - CORE_PEER_TLS_ENABLED=true
            - CORE_PEER_GOSSIP_USELEADERELECTION=true
            - CORE_PEER_GOSSIP_ORGLEADER=false
            - CORE_PEER_PROFILE_ENABLED=true
            - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
            - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
            - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
            # Peer specific variabes
            - CORE_PEER_ID=peer5.contractors.example.com
            - CORE_PEER_ADDRESS=peer5.contractors.example.com:9063
            - CORE_PEER_LISTENADDRESS=0.0.0.0:9063
            - CORE_PEER_CHAINCODEADDRESS=peer5.contractors.example.com:9064
            - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:9064
            - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer5.contractors.example.com:9063
            - CORE_PEER_GOSSIP_BOOTSTRAP=peer5.contractors.example.com:9063
            - CORE_PEER_LOCALMSPID=ContractorsMSP
        volumes:
            - /var/run/:/host/var/run/
            - ../organizations/peerOrganizations/contractors.example.com/peers/peer5.contractors.example.com/msp:/etc/hyperledger/fabric/msp
            - ../organizations/peerOrganizations/contractors.example.com/peers/peer5.contractors.example.com/tls:/etc/hyperledger/fabric/tls
            - peer5.contractors.example.com:/var/hyperledger/production
        working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
        command: peer node start
        ports:
            - 9063:9063
        networks:
            - test

    peer6.contractors.example.com:
        container_name: peer6.contractors.example.com
        image: hyperledger/fabric-peer:$IMAGE_TAG
        environment:
            #Generic peer variables
            - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
            # the following setting starts chaincode containers on the same
            # bridge network as the peers
            # https://docs.docker.com/compose/networking/
            - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
            - FABRIC_LOGGING_SPEC=INFO
            #- FABRIC_LOGGING_SPEC=DEBUG
            - CORE_PEER_TLS_ENABLED=true
            - CORE_PEER_GOSSIP_USELEADERELECTION=true
            - CORE_PEER_GOSSIP_ORGLEADER=false
            - CORE_PEER_PROFILE_ENABLED=true
            - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
            - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
            - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
            # Peer specific variabes
            - CORE_PEER_ID=peer6.contractors.example.com
            - CORE_PEER_ADDRESS=peer6.contractors.example.com:9065
            - CORE_PEER_LISTENADDRESS=0.0.0.0:9065
            - CORE_PEER_CHAINCODEADDRESS=peer6.contractors.example.com:9066
            - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:9066
            - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer6.contractors.example.com:9065
            - CORE_PEER_GOSSIP_BOOTSTRAP=peer6.contractors.example.com:9065
            - CORE_PEER_LOCALMSPID=ContractorsMSP
        volumes:
            - /var/run/:/host/var/run/
            - ../organizations/peerOrganizations/contractors.example.com/peers/peer6.contractors.example.com/msp:/etc/hyperledger/fabric/msp
            - ../organizations/peerOrganizations/contractors.example.com/peers/peer6.contractors.example.com/tls:/etc/hyperledger/fabric/tls
            - peer6.contractors.example.com:/var/hyperledger/production
        working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
        command: peer node start
        ports:
            - 9065:9065
        networks:
            - test

    peer7.contractors.example.com:
        container_name: peer7.contractors.example.com
        image: hyperledger/fabric-peer:$IMAGE_TAG
        environment:
            #Generic peer variables
            - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
            # the following setting starts chaincode containers on the same
            # bridge network as the peers
            # https://docs.docker.com/compose/networking/
            - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
            - FABRIC_LOGGING_SPEC=INFO
            #- FABRIC_LOGGING_SPEC=DEBUG
            - CORE_PEER_TLS_ENABLED=true
            - CORE_PEER_GOSSIP_USELEADERELECTION=true
            - CORE_PEER_GOSSIP_ORGLEADER=false
            - CORE_PEER_PROFILE_ENABLED=true
            - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
            - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
            - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
            # Peer specific variabes
            - CORE_PEER_ID=peer7.contractors.example.com
            - CORE_PEER_ADDRESS=peer7.contractors.example.com:9067
            - CORE_PEER_LISTENADDRESS=0.0.0.0:9067
            - CORE_PEER_CHAINCODEADDRESS=peer7.contractors.example.com:9068
            - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:9068
            - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer7.contractors.example.com:9067
            - CORE_PEER_GOSSIP_BOOTSTRAP=peer7.contractors.example.com:9067
            - CORE_PEER_LOCALMSPID=ContractorsMSP
        volumes:
            - /var/run/:/host/var/run/
            - ../organizations/peerOrganizations/contractors.example.com/peers/peer7.contractors.example.com/msp:/etc/hyperledger/fabric/msp
            - ../organizations/peerOrganizations/contractors.example.com/peers/peer7.contractors.example.com/tls:/etc/hyperledger/fabric/tls
            - peer7.contractors.example.com:/var/hyperledger/production
        working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
        command: peer node start
        ports:
            - 9067:9067
        networks:
            - test

    peer8.contractors.example.com:
        container_name: peer8.contractors.example.com
        image: hyperledger/fabric-peer:$IMAGE_TAG
        environment:
            #Generic peer variables
            - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
            # the following setting starts chaincode containers on the same
            # bridge network as the peers
            # https://docs.docker.com/compose/networking/
            - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
            - FABRIC_LOGGING_SPEC=INFO
            #- FABRIC_LOGGING_SPEC=DEBUG
            - CORE_PEER_TLS_ENABLED=true
            - CORE_PEER_GOSSIP_USELEADERELECTION=true
            - CORE_PEER_GOSSIP_ORGLEADER=false
            - CORE_PEER_PROFILE_ENABLED=true
            - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
            - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
            - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
            # Peer specific variabes
            - CORE_PEER_ID=peer8.contractors.example.com
            - CORE_PEER_ADDRESS=peer8.contractors.example.com:9069
            - CORE_PEER_LISTENADDRESS=0.0.0.0:9069
            - CORE_PEER_CHAINCODEADDRESS=peer8.contractors.example.com:9070
            - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:9070
            - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer8.contractors.example.com:9069
            - CORE_PEER_GOSSIP_BOOTSTRAP=peer8.contractors.example.com:9069
            - CORE_PEER_LOCALMSPID=ContractorsMSP
        volumes:
            - /var/run/:/host/var/run/
            - ../organizations/peerOrganizations/contractors.example.com/peers/peer8.contractors.example.com/msp:/etc/hyperledger/fabric/msp
            - ../organizations/peerOrganizations/contractors.example.com/peers/peer8.contractors.example.com/tls:/etc/hyperledger/fabric/tls
            - peer8.contractors.example.com:/var/hyperledger/production
        working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
        command: peer node start
        ports:
            - 9069:9069
        networks:
            - test

    peer9.contractors.example.com:
        container_name: peer9.contractors.example.com
        image: hyperledger/fabric-peer:$IMAGE_TAG
        environment:
            #Generic peer variables
            - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
            # the following setting starts chaincode containers on the same
            # bridge network as the peers
            # https://docs.docker.com/compose/networking/
            - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
            - FABRIC_LOGGING_SPEC=INFO
            #- FABRIC_LOGGING_SPEC=DEBUG
            - CORE_PEER_TLS_ENABLED=true
            - CORE_PEER_GOSSIP_USELEADERELECTION=true
            - CORE_PEER_GOSSIP_ORGLEADER=false
            - CORE_PEER_PROFILE_ENABLED=true
            - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
            - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
            - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
            # Peer specific variabes
            - CORE_PEER_ID=peer9.contractors.example.com
            - CORE_PEER_ADDRESS=peer9.contractors.example.com:9071
            - CORE_PEER_LISTENADDRESS=0.0.0.0:9071
            - CORE_PEER_CHAINCODEADDRESS=peer9.contractors.example.com:9072
            - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:9072
            - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer9.contractors.example.com:9071
            - CORE_PEER_GOSSIP_BOOTSTRAP=peer9.contractors.example.com:9071
            - CORE_PEER_LOCALMSPID=ContractorsMSP
        volumes:
            - /var/run/:/host/var/run/
            - ../organizations/peerOrganizations/contractors.example.com/peers/peer9.contractors.example.com/msp:/etc/hyperledger/fabric/msp
            - ../organizations/peerOrganizations/contractors.example.com/peers/peer9.contractors.example.com/tls:/etc/hyperledger/fabric/tls
            - peer9.contractors.example.com:/var/hyperledger/production
        working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
        command: peer node start
        ports:
            - 9071:9071
        networks:
            - test
